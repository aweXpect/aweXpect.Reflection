[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/aweXpect/aweXpect.Reflection.git")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"aweXpect.Reflection.Internal.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001002ddc851a03b64bc2a64705e04ea47777e669695d8afed80f7544ff34fc699706a9f99f8385085bd675508e4c2acb917b7e1c9984da918c3fab585850a8a5b013c1d1780e1bb9e1e46656d965fc35bfc237a929c2c94e2e998d66ca44ee0a526245ef3f97dd136efe2e657b244b5f9f4a233fe656d659dddd811ba6bbed6817c1")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName=".NET Standard 2.0")]
namespace aweXpect.Reflection
{
    [System.Flags]
    public enum AccessModifiers
    {
        Internal = 1,
        Protected = 2,
        Private = 4,
        Public = 8,
    }
    public static class Filter
    {
        public static aweXpect.Reflection.Filter<TEntity> FromPredicate<TEntity>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>> predicate) { }
        public static aweXpect.Reflection.Filter<TEntity> FromPredicate<TEntity>(System.Func<TEntity, bool> predicate, string name) { }
    }
    public abstract class Filter<TEntity>
    {
        protected Filter() { }
        public abstract bool Applies(TEntity type);
    }
    public class FilteredAssemblies : System.Collections.Generic.IEnumerable<System.Reflection.Assembly>, System.Collections.IEnumerable
    {
        public FilteredAssemblies(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> source) { }
        protected System.Collections.Generic.List<aweXpect.Reflection.Filter<System.Reflection.Assembly>> Filters { get; }
        public System.Collections.Generic.IEnumerator<System.Reflection.Assembly> GetEnumerator() { }
        public aweXpect.Reflection.FilteredTypes Types() { }
    }
    public class FilteredTypes : System.Collections.Generic.IEnumerable<System.Type>, System.Collections.IEnumerable
    {
        public FilteredTypes(System.Collections.Generic.IEnumerable<System.Type> source) { }
        protected System.Collections.Generic.List<aweXpect.Reflection.Filter<System.Type>> Filters { get; }
        public System.Collections.Generic.IEnumerator<System.Type> GetEnumerator() { }
    }
    public static class In
    {
        public static aweXpect.Reflection.FilteredAssemblies AllLoadedAssemblies(System.Func<System.Reflection.Assembly, bool>? predicate = null, bool applyExclusionFilters = true) { }
        public static aweXpect.Reflection.FilteredAssemblies Assemblies(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies) { }
        public static aweXpect.Reflection.FilteredAssemblies Assemblies(params System.Reflection.Assembly[] assemblies) { }
        public static aweXpect.Reflection.FilteredAssemblies AssemblyContaining(System.Type type) { }
        public static aweXpect.Reflection.FilteredAssemblies AssemblyContaining<TType>() { }
        public static aweXpect.Reflection.FilteredAssemblies ExecutingAssembly() { }
    }
    public static class ThatType
    {
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsAClass(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsAbstract(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsAnInterface(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsGeneric(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNested(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotAClass(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotAbstract(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotAnInterface(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotGeneric(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotNested(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotSealed(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotStatic(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsSealed(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsStatic(this aweXpect.Core.IThat<System.Type?> subject) { }
    }
    public static class ThatTypes
    {
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<System.Type>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.Type>>> AreAbstract(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.Type>> subject) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<System.Type>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.Type>>> AreNotAbstract(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.Type>> subject) { }
    }
}