[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/aweXpect/aweXpect.Reflection.git")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"aweXpect.Reflection.Internal.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001002ddc851a03b64bc2a64705e04ea47777e669695d8afed80f7544ff34fc699706a9f99f8385085bd675508e4c2acb917b7e1c9984da918c3fab585850a8a5b013c1d1780e1bb9e1e46656d965fc35bfc237a929c2c94e2e998d66ca44ee0a526245ef3f97dd136efe2e657b244b5f9f4a233fe656d659dddd811ba6bbed6817c1")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace aweXpect.Reflection
{
    [System.Flags]
    public enum AccessModifiers
    {
        Internal = 1,
        Protected = 2,
        Private = 4,
        Public = 8,
    }
    public static class Filter
    {
        public static aweXpect.Reflection.Filter<TEntity> FromPredicate<TEntity>(System.Linq.Expressions.Expression<System.Func<TEntity, bool>> predicate) { }
        public static aweXpect.Reflection.Filter<TEntity> FromPredicate<TEntity>(System.Func<TEntity, bool> predicate, string name) { }
    }
    public abstract class Filter<TEntity>
    {
        protected Filter() { }
        public abstract bool Applies(TEntity type);
    }
    public static class Filtered
    {
        public class Assemblies : aweXpect.Reflection.Filtered<System.Reflection.Assembly, aweXpect.Reflection.Filtered.Assemblies>
        {
            public Assemblies(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> source) { }
            public aweXpect.Reflection.Filtered.Types Types() { }
        }
        public class Constructors : aweXpect.Reflection.Filtered<System.Reflection.ConstructorInfo, aweXpect.Reflection.Filtered.Constructors>
        {
            public Constructors(System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo> source) { }
            public aweXpect.Reflection.Filtered.Types Types() { }
        }
        public class Events : aweXpect.Reflection.Filtered<System.Reflection.EventInfo, aweXpect.Reflection.Filtered.Events>
        {
            public Events(System.Collections.Generic.IEnumerable<System.Reflection.EventInfo> source) { }
            public aweXpect.Reflection.Filtered.Types Types() { }
        }
        public class Fields : aweXpect.Reflection.Filtered<System.Reflection.FieldInfo, aweXpect.Reflection.Filtered.Fields>
        {
            public Fields(System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo> source) { }
            public aweXpect.Reflection.Filtered.Types Types() { }
        }
        public class Methods : aweXpect.Reflection.Filtered<System.Reflection.MethodInfo, aweXpect.Reflection.Filtered.Methods>
        {
            public Methods(System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> source) { }
            public aweXpect.Reflection.Filtered.Types Types() { }
        }
        public class Properties : aweXpect.Reflection.Filtered<System.Reflection.PropertyInfo, aweXpect.Reflection.Filtered.Properties>
        {
            public Properties(System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> source) { }
            public aweXpect.Reflection.Filtered.Types Types() { }
        }
        public class Types : aweXpect.Reflection.Filtered<System.Type, aweXpect.Reflection.Filtered.Types>
        {
            public Types(System.Collections.Generic.IEnumerable<System.Type> source) { }
            public Types(aweXpect.Reflection.Filtered.Assemblies assemblies) { }
            public aweXpect.Reflection.Filtered.Assemblies Assemblies() { }
            public aweXpect.Reflection.Filtered.Constructors Constructors() { }
            public aweXpect.Reflection.Filtered.Events Events() { }
            public aweXpect.Reflection.Filtered.Fields Fields() { }
            public aweXpect.Reflection.Filtered.Methods Methods() { }
            public aweXpect.Reflection.Filtered.Properties Properties() { }
        }
    }
    public static class FilteredExtensions
    {
        public static aweXpect.Reflection.Filtered.Types WhichAreAbstract(this aweXpect.Reflection.Filtered.Types @this) { }
    }
    public abstract class Filtered<T, TFiltered> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
        where TFiltered : aweXpect.Reflection.Filtered<T, TFiltered>
    {
        protected Filtered(System.Collections.Generic.IEnumerable<T> source) { }
        public System.Collections.Generic.IEnumerator<T> GetEnumerator() { }
        public TFiltered Which(System.Linq.Expressions.Expression<System.Func<T, bool>> filter) { }
        public TFiltered Which(System.Func<T, bool> filter, string name) { }
    }
    public static class In
    {
        public static aweXpect.Reflection.Filtered.Assemblies AllLoadedAssemblies(System.Func<System.Reflection.Assembly, bool>? predicate = null, bool applyExclusionFilters = true) { }
        public static aweXpect.Reflection.Filtered.Assemblies Assemblies(System.Collections.Generic.IEnumerable<System.Reflection.Assembly> assemblies) { }
        public static aweXpect.Reflection.Filtered.Assemblies Assemblies(params System.Reflection.Assembly?[] assemblies) { }
        public static aweXpect.Reflection.Filtered.Assemblies AssemblyContaining(System.Type type) { }
        public static aweXpect.Reflection.Filtered.Assemblies AssemblyContaining<TType>() { }
        public static aweXpect.Reflection.Filtered.Assemblies EntryAssembly() { }
        public static aweXpect.Reflection.Filtered.Assemblies ExecutingAssembly() { }
    }
    public static class ThatType
    {
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsAClass(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsAbstract(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsAnInterface(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsGeneric(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNested(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotAClass(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotAbstract(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotAnInterface(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotGeneric(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotNested(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotSealed(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsNotStatic(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsSealed(this aweXpect.Core.IThat<System.Type?> subject) { }
        public static aweXpect.Results.AndOrResult<System.Type?, aweXpect.Core.IThat<System.Type?>> IsStatic(this aweXpect.Core.IThat<System.Type?> subject) { }
    }
    public static class ThatTypes
    {
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<System.Type>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.Type>>> AreAbstract(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.Type>> subject) { }
        public static aweXpect.Results.AndOrResult<System.Collections.Generic.IEnumerable<System.Type>, aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.Type>>> AreNotAbstract(this aweXpect.Core.IThat<System.Collections.Generic.IEnumerable<System.Type>> subject) { }
    }
}