using System.Reflection;
using Xunit.Sdk;

namespace aweXpect.Reflection.Tests;

public sealed partial class ThatConstructor
{
	public sealed class HasParameterChaining
	{
		public sealed class Tests
		{
			[Fact]
			public async Task AtIndex_WhenParameterExistsAtSpecificIndex_ShouldSucceed()
			{
				ConstructorInfo constructorInfo = typeof(TestClass).GetConstructor([typeof(int), typeof(string)])!;

				async Task Act()
					=> await That(constructorInfo).HasParameter<int>().AtIndex(0);

				await That(Act).DoesNotThrow();
			}

			[Fact]
			public async Task AtIndex_WhenParameterDoesNotExistAtSpecificIndex_ShouldFail()
			{
				ConstructorInfo constructorInfo = typeof(TestClass).GetConstructor([typeof(int), typeof(string)])!;

				async Task Act()
					=> await That(constructorInfo).HasParameter<string>().AtIndex(0);

				await That(Act).Throws<XunitException>()
					.WithMessage("*has parameter of type System.String*");
			}

			[Fact]
			public async Task AtIndexFromEnd_WhenParameterExistsAtSpecificIndexFromEnd_ShouldSucceed()
			{
				ConstructorInfo constructorInfo = typeof(TestClass).GetConstructor([typeof(int), typeof(string)])!;

				async Task Act()
					=> await That(constructorInfo).HasParameter<string>().AtIndex(1).FromEnd();

				await That(Act).DoesNotThrow();
			}

			[Fact]
			public async Task WithoutDefaultValue_WhenParameterHasNoDefault_ShouldSucceed()
			{
				ConstructorInfo constructorInfo = typeof(TestClass).GetConstructor([typeof(int), typeof(string)])!;

				async Task Act()
					=> await That(constructorInfo).HasParameter<int>().WithoutDefaultValue();

				await That(Act).DoesNotThrow();
			}

			[Fact]
			public async Task WithDefaultValue_WhenParameterHasDefault_ShouldSucceed()
			{
				ConstructorInfo constructorInfo = typeof(TestClassWithDefaults).GetConstructor([typeof(int), typeof(string)])!;

				async Task Act()
					=> await That(constructorInfo).HasParameter<string>().WithDefaultValue();

				await That(Act).DoesNotThrow();
			}

			[Fact]
			public async Task IgnoringCase_WhenParameterNameDiffersInCase_ShouldSucceed()
			{
				ConstructorInfo constructorInfo = typeof(TestClass).GetConstructor([typeof(int), typeof(string)])!;

				async Task Act()
					=> await That(constructorInfo).HasParameter<int>("VALUE").IgnoringCase();

				await That(Act).DoesNotThrow();
			}

			[Fact]
			public async Task AsPrefix_WhenParameterNameStartsWithPrefix_ShouldSucceed()
			{
				ConstructorInfo constructorInfo = typeof(TestClass).GetConstructor([typeof(int), typeof(string)])!;

				async Task Act()
					=> await That(constructorInfo).HasParameter<int>("val").AsPrefix();

				await That(Act).DoesNotThrow();
			}

			// ReSharper disable UnusedParameter.Local
			// ReSharper disable UnusedMember.Local
			private class TestClass
			{
				public TestClass(int value, string name) { }
			}

			private class TestClassWithDefaults
			{
				public TestClassWithDefaults(int value, string name = "default") { }
			}
			// ReSharper restore UnusedParameter.Local
			// ReSharper restore UnusedMember.Local
		}
	}
}